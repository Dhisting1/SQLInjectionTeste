# services:
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#       POSTGRES_DB: app_db
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     networks:
#       - app-network

#   backend:
#     build: ./backend
#     ports:
#       - "3001:3001"
#     depends_on:
#       postgres:
#         condition: service_healthy
#     networks:
#       - app-network

#   frontend:
#     build: ./frontend
#     ports:
#       - "3000:3000"
#     depends_on:
#       - backend
#     environment:
#       - CHOKIDAR_USEPOLLING=true
#     command: npm run start
#     networks:
#       - app-network

# volumes:
#   postgres_data:

# networks:
#   app-network:
#     driver: bridge


#########################################################


version: "3.9"
services:
  postgres:
    image: postgres:15-alpine
    container_name: sqlinjectionteste-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: sqlinjectionteste-backend
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: sqlinjectionteste-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
