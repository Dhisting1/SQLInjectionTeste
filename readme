# SQL Injection Teste üéì

Projeto acad√™mico para demonstrar **SQL Injection** e como preveni-lo.

---

## üñ• Arquitetura do Projeto

[Frontend React + Vite] ---> [Backend Node.js + Express] ---> [PostgreSQL Docker]
(http:3000) (http:3001) (5432)




- **Frontend:** interface do usu√°rio
- **Backend:** processa login e consulta banco
- **PostgreSQL:** armazena usu√°rios

Todos os servi√ßos est√£o rodando em **containers Docker**, conectados pela mesma **rede (`app-network`)**.

---

## ‚ö° Tecnologias Utilizadas

- **Frontend:** React + Vite + TypeScript + Axios  
- **Backend:** Node.js + Express + TypeScript + pg + pg-pool + CORS  
- **Banco:** PostgreSQL 15 (dockerizado)  
- **Containeriza√ß√£o:** Docker + Docker Compose  

---

## üîÑ Fluxo de Login

1. Usu√°rio envia **login e senha** no frontend.
2. Backend recebe os dados e executa **query SQL** no banco.
3. Banco retorna o usu√°rio se **credenciais estiverem corretas**.
4. Frontend exibe mensagem de sucesso ou erro.

> ‚ö†Ô∏è **Vulnerabilidade:** query concatenada permite SQL Injection:
```sql
SELECT * FROM users WHERE username = 'INPUT' AND password = 'INPUT';
‚úÖ Segura: query parametrizada previne ataques:

sql

SELECT * FROM users WHERE username = $1 AND password = $2;
üöÄ Rodando o Projeto
Com Docker (recomendado)
bash

docker compose up --build
Frontend: http://localhost:3000

Backend: http://localhost:3001

Sem Docker (opcional)
bash

# Backend
cd backend
npm install
npm run start

# Frontend
cd frontend
npm install
npm run dev
üë®‚Äçüíª Usu√°rios de Teste
Usu√°rio	Senha
admin	secret
user	pass

Payload de SQL Injection (para demonstra√ß√£o):
json

{
  "username": "' OR '1'='1",
  "password": "' OR '1'='1"
}
üîí Aprendizados
Import√¢ncia de queries parametrizadas.

Entendimento do fluxo de dados entre frontend, backend e banco.

Demonstra√ß√£o pr√°tica de SQL Injection para fins educativos.

üì¶ Diagrama de Containers Docker
lua

+--------------------+      +----------------------+      +----------------------+
| Frontend (3000)    | ---> | Backend (3001)      | ---> | PostgreSQL (5432)   |
| React + Vite       |      | Node.js + Express   |      | Banco de usu√°rios    |
+--------------------+      +----------------------+      +----------------------+

Todos conectados pela mesma rede Docker app-network.

